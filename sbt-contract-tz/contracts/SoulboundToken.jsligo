type ipfs_url = bytes;

type owner = address;

type transfer_params =
// @layout:comb
{
  from_: address,
  txs: list<
  // @layout:comb
  { 
    to_: address, 
    token_id: nat, 
    amount: nat
  }>
};

type request = { owner: address, token_id: nat };

type callback = 
// @layout:comb
{ request, balance: nat };

type balance_of =
// @layout:comb
{ requests: list<request>, callback: contract<list<callback>> };

type token_data = { owner, ipfs_url, creation_date: timestamp };

type operator =
// @layout:comb
{ owner: address, operator: address, token_id: nat };

type unit_update = ["Add_operator", operator] | ["Remove_operator", operator];

type metadata = { token_id: nat, token_info: map<string, bytes> };

type token_metadata_values = { token_id: nat, token_info: map<string, bytes> };

type parameter =
  | ["Mint", owner, ipfs_url]
  | ["Burn", owner]
  | ["Add_admin", owner]
  | ["Remove_admin", owner]
  | ["Transfer", list<transfer_params>]
  | ["Balance_of", balance_of]
  | ["Update_operators", list<unit_update>];

type storage = {
  token_counter: nat,
  ledger: big_map<nat, address>,
  tokens: big_map<nat, token_data>,
  tokens_by_owner: big_map<owner, nat>,
  token_metadata: big_map<nat, token_metadata_values>,
  metadata: big_map<string, bytes>,
  admins: set<address>,
  name: bytes,
  symbol: bytes
};

type return_ = [list<operation>, storage];

const mint = (owner: owner, ipfs_url: ipfs_url, store: storage): return_ => {
  if (!Set.mem(Tezos.get_sender(), store.admins)) {
    return failwith("FA2_NOT_OPERATOR")
  };
  if (Big_map.mem(owner, store.tokens_by_owner)) {
    return failwith("Owner already has a token")
  };

  let new_ledger = Big_map.add(store.token_counter, owner, store.ledger);
  let new_token =
    { owner: owner, ipfs_url: ipfs_url, creation_date: Tezos.get_now() };
  let new_tokens = Big_map.add(store.token_counter, new_token, store.tokens);
  let new_tokens_by_owner =
    Big_map.add(owner, store.token_counter, store.tokens_by_owner);
  let new_token_counter = store.token_counter + (1 as nat);

  let token_metadata = Map.literal(list([
    ["name", store.name],
    ["decimals", bytes `0`],
    ["symbol", store.symbol],
    ["", ipfs_url]
  ]));

  let new_token_metadata = Big_map.add(store.token_counter, {
    token_id: store.token_counter,
    token_info: token_metadata
  }, store.token_metadata);

  return [
    list([]),
    {
      ...store,
      ledger: new_ledger,
      tokens: new_tokens,
      token_metadata: new_token_metadata,
      token_counter: new_token_counter,
      tokens_by_owner: new_tokens_by_owner
    }
  ]
};

const burn = (owner: owner, store: storage): return_ => {
  if (!Set.mem(Tezos.get_sender(), store.admins) && Tezos.get_sender() != owner) {
    return failwith("FA2_NOT_OPERATOR")
  };
  let token_id: nat =
    Option.unopt_with_error(
      Big_map.find_opt(owner, store.tokens_by_owner),
      "Owner doesn't have this token"
    );
  let new_ledger = Big_map.remove(token_id, store.ledger);
  let new_tokens_by_owner = Big_map.remove(owner, store.tokens_by_owner);
  let new_token_metadata = Big_map.remove(token_id, store.token_metadata);
  let new_tokens = Big_map.remove(token_id, store.tokens);
  return [
    list([]),
    { ...store, 
      ledger: new_ledger,
      tokens: new_tokens,
      tokens_by_owner: new_tokens_by_owner,
      token_metadata: new_token_metadata
    }
  ]
};

const add_admin = (admin: address, store: storage): return_ => {
  if (!Set.mem(Tezos.get_sender(), store.admins)) {
    return failwith("FA2_NOT_ADMIN")
  };
  return [list([]), { ...store, admins: Set.add(admin, store.admins) }]
};

const remove_admin = (admin: address, store: storage): return_ => {
  if (!Set.mem(Tezos.get_sender(), store.admins)) {
    return failwith("FA2_NOT_ADMIN")
  };
  return [list([]), { ...store, admins: Set.remove(admin, store.admins) }]
};

const transfer = (_transfer_params: list<transfer_params>, _store: storage)
  : return_ => { return failwith("FA2_TX_DENIED") };

const balance_of = (balance_of: balance_of, store: storage): return_ => {
  const { requests, callback } = balance_of;
  const get_balance_info = (request: request): callback => {
    let balance_ = 0 as nat;
    if (Big_map.mem(request.owner, store.tokens_by_owner)) {
      balance_ = 1 as nat
    };
    return ({ request: request, balance: balance_ })
  };
  const callback_param = List.map(get_balance_info, requests);
  const operation = Tezos.transaction(callback_param, (0 as tez), callback);
  return [list([operation]), store]
};

const update_operators = (_unit_updates: list<unit_update>, _store: storage)
  : return_ => { return failwith("METHOD_NOT_IMPLEMENTED") };

const main = (action: parameter, store: storage): return_ =>
  match(
    action,
    {
      Mint: ([owner, ipfs_url]: parameter) => mint(owner, ipfs_url, store),
      Burn: (o: owner) => burn(o, store),
      Add_admin: (a: owner) => add_admin(a, store),
      Remove_admin: (a: owner) => remove_admin(a, store),
      Transfer: (tp: list<transfer_params>) => transfer(tp, store),
      Balance_of: (bo: balance_of) => balance_of(bo, store),
      Update_operators: (uu: list<unit_update>) => update_operators(uu, store)
    }
  );

// @view
const token_uri = (owner: owner, store: storage): ipfs_url => {
  let token_id: nat =
    Option.unopt_with_error(
      Big_map.find_opt(owner, store.tokens_by_owner),
      "Owner doesn't have a token"
    );
  return match(
    Big_map.find_opt(token_id, store.tokens),
    { Some: token => token.ipfs_url, None: () => failwith("Unexpected error.") }
  )
};

// @view
const token_creation_date = (owner: owner, store: storage): timestamp => {
  let token_id: nat =
    Option.unopt_with_error(
      Big_map.find_opt(owner, store.tokens_by_owner),
      "Owner doesn't have a token"
    );
  return match(
    Big_map.find_opt(token_id, store.tokens),
    {
      Some: token => token.creation_date,
      None: () => failwith("Unexpected error.")
    }
  )
};

// @view
const has_token = (owner: owner, store: storage): bool =>
  Big_map.mem(owner, store.tokens_by_owner);
